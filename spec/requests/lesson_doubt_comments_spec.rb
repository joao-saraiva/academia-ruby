 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/lesson_doubt_comments", type: :request do
  
  # LessonDoubtComment. As you add validations to LessonDoubtComment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:lesson_doubt_comment)
  }

  let(:invalid_attributes) {
    { user_id: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      LessonDoubtComment.create! valid_attributes
      get lesson_doubt_comments_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
      get lesson_doubt_comment_url(lesson_doubt_comment)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_lesson_doubt_comment_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
      get edit_lesson_doubt_comment_url(lesson_doubt_comment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new LessonDoubtComment" do
        expect {
          post lesson_doubt_comments_url, params: { lesson_doubt_comment: valid_attributes }
        }.to change(LessonDoubtComment, :count).by(1)
      end

      it "redirects to the created lesson_doubt_comment" do
        post lesson_doubt_comments_url, params: { lesson_doubt_comment: valid_attributes }
        expect(response).to redirect_to(lesson_doubt_comment_url(LessonDoubtComment.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new LessonDoubtComment" do
        expect {
          post lesson_doubt_comments_url, params: { lesson_doubt_comment: invalid_attributes }
        }.to change(LessonDoubtComment, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post lesson_doubt_comments_url, params: { lesson_doubt_comment: invalid_attributes }
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { doubt_text: 'yaay i got my answer'}
      }

      it "updates the requested lesson_doubt_comment" do
        lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
        patch lesson_doubt_comment_url(lesson_doubt_comment), params: { lesson_doubt_comment: new_attributes }
        lesson_doubt_comment.reload
        expect(lesson_doubt_comment.doubt_text).to eq new_attributes[:doubt_text]
      end

      it "redirects to the lesson_doubt_comment" do
        lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
        patch lesson_doubt_comment_url(lesson_doubt_comment), params: { lesson_doubt_comment: new_attributes }
        lesson_doubt_comment.reload
        expect(response).to redirect_to(lesson_doubt_comment_url(lesson_doubt_comment))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
        patch lesson_doubt_comment_url(lesson_doubt_comment), params: { lesson_doubt_comment: invalid_attributes }
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested lesson_doubt_comment" do
      lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
      expect {
        delete lesson_doubt_comment_url(lesson_doubt_comment)
      }.to change(LessonDoubtComment, :count).by(-1)
    end

    it "redirects to the lesson_doubt_comments list" do
      lesson_doubt_comment = LessonDoubtComment.create! valid_attributes
      delete lesson_doubt_comment_url(lesson_doubt_comment)
      expect(response).to redirect_to(lesson_doubt_comments_url)
    end
  end
end
